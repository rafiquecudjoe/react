{"version":3,"sources":["CreateCustomerComponent/CreateCustomerComponent.tsx","EditCustomerComponent/EditCustomerComponent.tsx","HomeComponent/HomeComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CreateCustomerComponent","props","first_name","last_name","phone","email","address","description","processFormSubmission","e","preventDefault","setState","loading","formData","state","submitSuccess","values","axios","post","then","data","setTimeout","history","push","handleInputChanges","currentTarget","name","value","isCreateCustomer","onCancelClick","bind","this","className","role","id","onSubmit","noValidate","htmlFor","type","onChange","placeholder","disabled","onClick","React","EditCustomerComponent","a","patch","setValues","match","params","customer","get","defaultValue","HomeComponent","customers","delete","index","findIndex","splice","length","scope","map","key","style","marginBottom","to","deleteCustomer","App","path","exact","component","Component","withRouter","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13e58703.chunk.js","sourcesContent":["import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport './CreateCustomerComponent.css';\n\nexport interface IValues {\n    first_name: string,\n    last_name: string,\n    email: string,\n    phone: string,\n    address: string,\n    description: string,\n}\n\nclass CreateCustomerComponent extends React.Component<any, any> {\n    first_name: any;\n    last_name: any;\n    phone: any;\n    email: any;\n    address: any;\n    description: any;\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            first_name: '',\n            last_name: '',\n            email: '',\n            phone: '',\n            address: '',\n            description: '',\n            values: [],\n            loading: false,\n            submitSuccess: false,\n            isCreateCustomer:true\n        }\n        this.onCancelClick = this.onCancelClick.bind(this);\n    }\n\n    private processFormSubmission = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        this.setState({ loading: true });\n\n        const formData = {\n            first_name: this.state.first_name,\n            last_name: this.state.last_name,\n            email: this.state.email,\n            phone: this.state.phone,\n            address: this.state.address,\n            description: this.state.description,\n        }\n\n        this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\n\n        axios.post(`http://localhost:5000/customers`, formData).then(data => [\n            setTimeout(() => {\n                this.props.history.push('/');\n            }, 750)\n        ]);\n    }\n\n    private onCancelClick(){\n        setTimeout(() => {\n            this.props.history.push('/');\n        }, 250);\n    }\n\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        this.setState({\n            [e.currentTarget.name]: e.currentTarget.value,\n        });\n        \n        if(e.currentTarget.name == \"first_name\"){\n            this.first_name = e.currentTarget.value;\n        }\n        else if(e.currentTarget.name == \"last_name\"){\n            this.last_name = e.currentTarget.value;\n        }\n        else if(e.currentTarget.name == \"phone\"){\n            this.phone = e.currentTarget.value;\n        }\n        else if(e.currentTarget.name == \"email\"){\n            this.email = e.currentTarget.value;\n        }\n        else if(e.currentTarget.name == \"address\"){\n            this.address = e.currentTarget.value;\n        }\n        else if(e.currentTarget.name == \"description\"){\n            this.description = e.currentTarget.value;\n        }\n\n        if(this.first_name && this.last_name && this.email &&\n            this.phone && this.address && this.description){\n                this.setState({isCreateCustomer:false});\n        }\n        else{\n            this.setState({isCreateCustomer:true});\n        }\n    }\n\n    public render() {\n        const { submitSuccess, loading } = this.state;\n        return (\n            <div>\n                <div className={\"col-md-12 form-wrapper\"}>\n                <p className=\"create-customer\"> Create Customer </p>\n\n                    {submitSuccess && (\n                        <div className=\"alert alert-info\" role=\"alert\">\n                            The form was successfully submitted!\n                            </div>\n                    )}\n\n                    <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"first_name\"> First Name </label>\n                            <input type=\"text\" id=\"first_name\" onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter first name\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"last_name\"> Last Name </label>\n                            <input type=\"text\" id=\"last_name\" onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter last name\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"email\"> Email </label>\n                            <input type=\"email\" id=\"email\" onChange={(e) => this.handleInputChanges(e)} name=\"email\" className=\"form-control\" placeholder=\"Enter email address\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"phone\"> Phone </label>\n                            <input type=\"text\" id=\"phone\" onChange={(e) => this.handleInputChanges(e)} name=\"phone\" className=\"form-control\" placeholder=\"Enter phone number\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"address\"> Address </label>\n                            <input type=\"text\" id=\"address\" onChange={(e) => this.handleInputChanges(e)} name=\"address\" className=\"form-control\" placeholder=\"Enter address\" />\n                        </div>\n\n                        <div className=\"form-group col-md-12\">\n                            <label htmlFor=\"description\"> Description </label>\n                            <input type=\"text\" id=\"description\" onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\n                        </div>\n                        <div className=\"form-group col-md-12 row\">\n                        <div className=\"form-group col-md-5 pull-right\">\n                            <button className=\"btn btn-success\" type=\"submit\" disabled={this.state.isCreateCustomer}>Create</button>\n                            {loading &&\n                                <span className=\"fa fa-circle-o-notch fa-spin\" />\n                            }\n                        </div>\n                        <div className=\"form-group col-md-4 pull-right\">\n                            <button className=\"btn btn-success\" type=\"reset\" onClick={this.onCancelClick}>\n                               Cancel\n                            </button>\n                        </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateCustomerComponent;\n\n  ","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport './EditCustomerComponent.css';\n\nexport interface IValues {\n    [key: string]: any;\n}\n\nexport interface IFormState {\n    id: number,\n    customer: any;\n    values: IValues[];\n    submitSuccess: boolean;\n    loading: boolean;\n}\n\nclass EditCustomerComponent extends React.Component<any, any> {\n   \n    constructor(props: any) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            customer: {},\n            values: [],\n            loading: false,\n            submitSuccess: false\n        }\n        this.onCancelClick = this.onCancelClick.bind(this);\n    }\n\n    public componentDidMount(): void {        \n        axios.get(`http://localhost:5000/customers/${this.state.id}`).then(data => {\n            this.setState({ customer: data.data });\n        })\n    }\n\n    private processFormSubmission = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\n        e.preventDefault();\n        this.setState({ loading: true });\n        axios.patch(`http://localhost:5000/customers/${this.state.id}`, this.state.values).then(data => {\n            this.setState({ submitSuccess: true, loading: false })\n            setTimeout(() => {\n                this.props.history.push('/');\n            }, 750)\n        })\n    }\n\n    private onCancelClick(){\n        setTimeout(() => {\n            this.props.history.push('/');\n        }, 250);\n    }\n\n    private setValues = (values: IValues) => {\n        this.setState({ values: { ...this.state.values, ...values } });\n    }\n\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        this.setValues({ [e.currentTarget.id]: e.currentTarget.value });\n    }\n\n    public render() {\n        const { submitSuccess, loading } = this.state;\n        return (\n            <div className=\"App\">\n                {this.state.customer &&\n                    <div>\n                        <div>\n                            <div className={\"col-md-12 form-wrapper\"}>\n                                <p className=\"edit-customer\"> Edit Customer </p>\n\n                                {submitSuccess && (\n                                    <div className=\"alert alert-info\" role=\"alert\">\n                                        Customer's details has been edited successfully </div>\n                                )}\n\n                                <form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"first_name\"> First Name </label>\n                                        <input type=\"text\" id=\"first_name\" defaultValue={this.state.customer.first_name} onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className=\"form-control\" placeholder=\"Enter customer's first name\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"last_name\"> Last Name </label>\n                                        <input type=\"text\" id=\"last_name\" defaultValue={this.state.customer.last_name} onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className=\"form-control\" placeholder=\"Enter customer's last name\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"email\"> Email </label>\n                                        <input type=\"email\" id=\"email\" defaultValue={this.state.customer.email} onChange={(e) => this.handleInputChanges(e)} name=\"email\" className=\"form-control\" placeholder=\"Enter customer's email address\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"phone\"> Phone </label>\n                                        <input type=\"text\" id=\"phone\" defaultValue={this.state.customer.phone} onChange={(e) => this.handleInputChanges(e)} name=\"phone\" className=\"form-control\" placeholder=\"Enter customer's phone number\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"address\"> Address </label>\n                                        <input type=\"text\" id=\"address\" defaultValue={this.state.customer.address} onChange={(e) => this.handleInputChanges(e)} name=\"address\" className=\"form-control\" placeholder=\"Enter customer's address\" />\n                                    </div>\n\n                                    <div className=\"form-group col-md-12\">\n                                        <label htmlFor=\"description\"> Description </label>\n                                        <input type=\"text\" id=\"description\" defaultValue={this.state.customer.description} onChange={(e) => this.handleInputChanges(e)} name=\"description\" className=\"form-control\" placeholder=\"Enter Description\" />\n                                    </div>\n                                    <div className=\"form-group col-md-12 row\">\n                                    <div className=\"form-group col-md-5 pull-right\">\n                                        <button className=\"btn btn-success\" type=\"submit\">\n                                            Edit Customer </button>\n                                        {loading &&\n                                            <span className=\"fa fa-circle-o-notch fa-spin\" />\n                                        }\n                                    </div>\n                                    <div className=\"form-group col-md-4 pull-right\">\n                                    <button className=\"btn btn-success\" type=\"reset\">Cancel\n                                    </button>\n                        </div>\n                        </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default EditCustomerComponent;\n\n  ","import * as React from 'react';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport './HomeComponent.css';\n\ninterface IState {\n    customers: any[];\n}\n\nclass HomeComponent extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = { customers: [] }\n    }\n\n    public componentDidMount(): void {\n        axios.get(`http://localhost:5000/customers`).then(data => {\n            this.setState({ customers: data.data })\n        })\n    }\n\n    public deleteCustomer(id: number) {\n        axios.delete(`http://localhost:5000/customers/${id}`).then(data => {\n            const index = this.state.customers.findIndex((customer: { id: any; }) => customer.id === id);\n            this.state.customers.splice(index, 1);\n            this.props.history.push('/');\n        })\n    }\n\n    public render() {\n        const customers = this.state.customers;\n        return (\n            <div>\n                {customers && customers.length === 0 && (\n                    <div className=\"text-center\">\n                        <p className=\"no-record\">No customer found at the moment</p>\n                    </div>\n                )}\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <table className=\"table table-bordered\">\n                            <thead className=\"thead-light\">\n                                <tr>\n                                    <th scope=\"col\">Firstname</th>\n                                    <th scope=\"col\">Lastname</th>\n                                    <th scope=\"col\">Email</th>\n                                    <th scope=\"col\">Phone</th>\n                                    <th scope=\"col\">Address</th>\n                                    <th scope=\"col\">Description</th>\n                                    <th scope=\"col\">Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {customers && customers.map((customer: { id: any; first_name: any; last_name: any; email: any; phone: any; address: any; description: any; }) =>\n                                    <tr key={customer.id}>\n                                        <td>{customer.first_name}</td>\n                                        <td>{customer.last_name}</td>\n                                        <td>{customer.email}</td>\n                                        <td>{customer.phone}</td>\n                                        <td>{customer.address}</td>\n                                        <td>{customer.description}</td>\n                                        <td>\n                                            <div className=\"d-flex justify-content-between align-items-center\">\n                                                <div className=\"btn-group\" style={{ marginBottom: \"20px\" }}>\n                                                    <Link to={`edit/${customer.id}`} className=\"btn btn-sm btn-outline-secondary\">Edit Customer</Link>\n                                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={() => this.deleteCustomer(customer.id)}>Delete Customer</button>\n                                                </div>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default HomeComponent;\n  ","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route, withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport CreateCustomerComponent from './CreateCustomerComponent';\nimport EditCustomerComponent from './EditCustomerComponent';\nimport HomeComponent from './HomeComponent';\n\nclass App extends React.Component<any,any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {      \n    };    \n}\n\n  public render() {\n    return (\n      <div>\n        <Switch>\n          <Route path={'/'} exact component={HomeComponent} />\n          <Route path={'/create'} exact component={CreateCustomerComponent} />\n          <Route path={'/edit/:id'} exact component={EditCustomerComponent} />\n        </Switch>\n      </div>\n    );\n  }\n}\nexport default withRouter(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  type Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n  };\r\n  \r\n  export function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(\r\n        process.env.PUBLIC_URL,\r\n        window.location.href\r\n      );\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'; \nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root')\n);\nserviceWorker.unregister();"],"sourceRoot":""}